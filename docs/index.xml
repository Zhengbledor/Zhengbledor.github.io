<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zhengbledor</title>
    <link>https://zhengbledor.github.io/</link>
    <description>Recent content on Zhengbledor</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 28 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://zhengbledor.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>六大设计原则</title>
      <link>https://zhengbledor.github.io/posts/designprinciples/</link>
      <pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/designprinciples/</guid>
      <description>Design Principles Link to heading 一、单一职责原则 Link to heading 一个类应该只有一个发生变化的原因。
模拟场景 Link to heading 一个视频网站有对用户分类的场景
访客用户只能观看480P视频，且有广告 普通会员只能观看720P视频，且有广告 VIP用户可以看1080P视频，且无广告
违背原则 Link to heading public class VideoUserSerice{ public void serveGrade(String usrType){ if(usrType == &amp;#34;VIP&amp;#34;){ // 视频1080P，无广告 }else if(usrType == &amp;#34;普通会员&amp;#34;){ // 视频720P，有广告 }else if(usrType == &amp;#34;访客用户&amp;#34;){ // 视频480P，有广告 } } } 改进方案 Link to heading public interface IVideoUserService{` // 清晰度 1080P、720P、480P void definition(); // 广告播放方式，有广告、无广告 void advertisement(); } 二、开闭原则 Link to heading 对象、类、模块和函数对扩展应该是开放的，但是对于修改是封闭的。</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://zhengbledor.github.io/about/</link>
      <pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/about/</guid>
      <description>郑布利多的博客，平时记载一点技术、生活的文章(万一哪天被裁了)</description>
    </item>
    
    <item>
      <title>创建型-工厂模式</title>
      <link>https://zhengbledor.github.io/posts/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>创建型-工厂模式 Link to heading 工厂模式又称为简单工厂模式，属于创建型设计模式的一种。
这种设计模式提供了按需创建对象的最佳方式。不会对外暴露创建细节，并且会通过一个统一的接口创建所需的对象。
它主要的意图是定义一个创建对象的接口，让其子类自己决定将哪一个工厂类实例化，工厂模式使创建过程延迟到子类中进行。
场景模拟 Link to heading 模拟发放多种奖品，在营销场景中，经常会约定在用户完成打卡、分享、留言、邀请注册等一系列行为操作后进行返利积分的操作。用户再通过返利积分兑换奖品，让整个系统构成一个生态闭环。
现假设有以下三种类型的商品接口。
// 优惠券 CouponResult sendCoupon(String uId, String couponNumber, String uuid); // 实物商品 Boolean deliverGoods(DeliverReq req); // 第三方兑换卡 void grantToken(String bindMobileNumber, String cardId); 三个接口返回值类型不同，入参不同，并且未来可能会扩展的兑换场景。
最初设计 Link to heading 工程结构
├─AwardReq.java ├─AwardRes.java └─PrizeController.java 实现
public class PrizeController{ public AwardRes awardToUser(AwardReq req){ if(req.type == &amp;#34;优惠券&amp;#34;){ // do something CouponResult result = sendCoupon(req.uId,req.conponNumber,req.uuid); return AwardRes(result); }else if(req.type == &amp;#34;实物&amp;#34;){ DelilverReq deliverReq = new DeliverReq(); // do something Boolean result = deliverGoods(deliverReq); return AwardRes(result); }else if(req.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://zhengbledor.github.io/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/contact/</guid>
      <description>Follow me, @Zhengbledor.</description>
    </item>
    
  </channel>
</rss>
