<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Zhengbledor</title>
    <link>https://zhengbledor.github.io/posts/</link>
    <description>Recent content in Posts on Zhengbledor</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 08 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://zhengbledor.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于清晰度「K」与「P」的定义</title>
      <link>https://zhengbledor.github.io/posts/%E5%85%B3%E4%BA%8E%E6%B8%85%E6%99%B0%E5%BA%A6k%E4%B8%8Ep%E7%9A%84%E5%AE%9A%E4%B9%89/</link>
      <pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/%E5%85%B3%E4%BA%8E%E6%B8%85%E6%99%B0%E5%BA%A6k%E4%B8%8Ep%E7%9A%84%E5%AE%9A%E4%B9%89/</guid>
      <description>关于清晰度「K」与「P」的定义 Link to heading （源自知乎答案：https://www.zhihu.com/question/24205632/answer/648608086）
定义 Link to heading P（Progressive scanning）是逐行扫描，几P就是纵向有多少行像素，例如，1080p就是纵向有1080行像素。
（其实现在的视频已经没有“扫描”这个概念了，扫描是从摄影机和模拟电视延续下来的一个概念，用来描述电子快门和电子枪的工作方式，在视频中的“逐行扫描”其实就相当于摄影机中的全域快门）
K （kilo）是指横向大约有几个1000列（等效）像素，1K就是1000，2K就是2000，4K就是4000。
（但在电视领域，这些“几K”都被加上了一个固定分辨率标准，比如1080p是1920x1080，4K是3840x2160，其他答主平时所说的这些所谓标准，都是16：9的电视标准）
注意：横边!=长边，横边是指与石视平线平行的边，如果一个视频/屏幕/图片是竖向的，则横边是短边，竖边是长边
举例 Link to heading 1920x1080是几K？
答：1.9K或2K
1440x1440是几K？
答：1.4k
iPhone Xr是几K几P屏？
答：iPhone Xr分辨率为828x1792，所以是0.8k屏，1792p
某电脑的屏幕最高能显示2560x1440分辨率，请问它是几K显示器？
答：2.5K</description>
    </item>
    
    <item>
      <title>行为型-命令模式</title>
      <link>https://zhengbledor.github.io/posts/%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</guid>
      <description>行为型-命令模式 Link to heading 在软件系统中，“行为请求者”与“行为实现者”通常呈现一种“紧耦合”。但在某些场合，比如要对行为进行“记录、撤销/重做、事务”等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将“行为请求者”与“行为实现者”解耦？将一组行为抽象为对象，实现二者之间的松耦合。这就是命令模式（Command Pattern）。
模式结构 Link to heading Command：
定义命令的接口，声明执行的方法。
ConcreteCommand：
命令接口实现对象，是“虚”的实现；通常会持有接收者，并调用接收者的功能来完成命令要执行的操作。
Receiver：
接收者，真正执行命令的对象。任何类都可能成为一个接收者，只要它能够实现命令要求实现的相应功能。
Invoker：
要求命令对象执行请求，通常会持有命令对象，可以持有很多的命令对象。这个是客户端真正触发命令并要求命令执行相应操作的地方，也就是说相当于使用命令对象的入口。
Client：
创建具体的命令对象，并且设置命令对象的接收者。注意这个不是我们常规意义上的客户端，而是在组装命令对象和接收者，或许，把这个Client称为装配者会更好理解，因为真正使用命令的客户端是从Invoker来触发执行。
场景模拟 Link to heading 比如现在我们有很多的类，彩电、冰箱、空调、洗衣机、热水器等，既然现在我们要通过一个遥控器去控制他们，那么我们就需要将控制这些电器的指令都给设计好才行，并且还不能有太强的关联性。
所有的电器肯定需要通过蓝牙或是红外线接受遥控器发送的请求，所以所有的电器都是接收者：
public interface Receiver { void action(); //具体行为，这里就写一个算了 } 接着我们要控制这些电器，那么肯定需要一个指令才能控制：
public abstract class Command { //指令抽象，不同的电器有指令 private final Receiver receiver; protected Command(Receiver receiver){ //指定此命令对应的电器（接受者） this.receiver = receiver; } public void execute() { receiver.action(); //执行命令，实际上就是让接收者开始干活 } } 最后我们来安排一个遥控器：
public class Controller { //遥控器只需要把我们的指令发出去就行了 public static void call(Command command){ command.</description>
    </item>
    
    <item>
      <title>行为型-模板方法模式</title>
      <link>https://zhengbledor.github.io/posts/%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</guid>
      <description> 行为型-模板方法模式 Link to heading 模板方法模式定义了一个算法的步骤，并允许子类别为一个或多个步骤提供其实践方式。让子类别在不改变算法架构的情况下，重新定义算法中的某些步骤。
有些时候，我们的业务可能需要经历很多个步骤来完成，比如我们生病了在医院看病，首先是去门诊挂号，然后等待叫号，然后是去找医生看病，确定病因后，就根据医生的处方去前台开药，最后付钱。这一整套流程看似是规规矩矩的，但是在这其中，某些步骤并不是确定的，比如医生看病这一步，由于不同的病因，可能会进行不同的处理，最后开出来的药方也会不同，所以，整套流程中，有些操作是固定的，有些操作可能需要根据具体情况而定。
在我们的程序中也是如此，可能某些操作是固定的，我们就可以直接在类中对应方法进行编写，但是可能某些操作需要视情况而定，由不同的子类实现来决定，这时，我们就需要让这些操作由子类来延迟实现了。现在我们就需要用到模板方法模式。
/** * 抽象诊断方法，因为现在只知道挂号和看医生是固定模式，剩下的开处方和拿药都是不确定的 */ public abstract class AbstractDiagnosis { public void test(){ System.out.println(&amp;#34;今天头好晕，不想起床，开摆，先跟公司请个假&amp;#34;); System.out.println(&amp;#34;去医院看病了~&amp;#34;); System.out.println(&amp;#34;1 &amp;gt;&amp;gt; 先挂号&amp;#34;); System.out.println(&amp;#34;2 &amp;gt;&amp;gt; 等待叫号&amp;#34;); //由于现在不知道该开什么处方，所以只能先定义一下行为，然后具体由子类实现 //大致的流程先定义好就行 this.prescribe(); this.medicine(); //开药同理 } public abstract void prescribe(); //开处方操作根据具体病症决定了 public abstract void medicine(); //拿药也是根据具体的处方去拿 } 现在我们定义好了抽象方法，只是将具体的流程先定义出来了，但是部分方法需要根据实现决定：
/** * 感冒相关的具体实现子类 */ public class ColdDiagnosis extends AbstractDiagnosis{ @Override public void prescribe() { System.out.println(&amp;#34;3 &amp;gt;&amp;gt; 一眼丁真，鉴定为假，你这不是感冒，纯粹是想摆烂&amp;#34;); } @Override public void medicine() { System.out.println(&amp;#34;4 &amp;gt;&amp;gt; 开点头孢回去吃吧&amp;#34;); } } </description>
    </item>
    
    <item>
      <title>行为型-责任链模式</title>
      <link>https://zhengbledor.github.io/posts/%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</guid>
      <description>行为型-责任链模式 Link to heading 在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。
比如我们的钉钉审批，实际上就是一条流水线一样的操作，由你发起申请，然后经过多个部门主管审批，最后才能通过，所以你的申请表相当于是在一条责任链上传递。当然除了这样的直线型责任链之外，还有环形、树形等。
实际上我们之前也遇到过很多种责任链，比如JavaWeb中学习的Filter过滤器，正是采用的责任链模式，通过将请求一级一级不断向下传递，来对我们所需要的请求进行过滤和处理。
请求-&amp;gt; Filter-&amp;gt; Filter-&amp;gt; Filter-&amp;gt; Filter-&amp;gt; Filter-&amp;gt; Servlet 这里我们就使用责任链模式来模拟一个简单的面试过程，我们面试也是一面二面三面这样走的流程，这里我们先设计一下责任链上的各个处理器：
public abstract class Handler { protected Handler successor; //这里我们就设计责任链以单链表形式存在，这里存放后继节点 public Handler connect(Handler successor){ //拼接后续节点 this.successor = successor; return successor; //这里返回后继节点，方便我们一会链式调用 } public void handle(){ this.doHandle(); //由不同的子类实现具体处理过程 Optional.ofNullable(successor) .ifPresent(Handler::handle); //责任链上如果还有后继节点，就继续向下传递 } public abstract void doHandle(); //结合上节课学习的模板方法，交给子类实现 } 因为面试有很多轮，所以我们这里创建几个处理器的实现：
public class FirstHandler extends Handler{ //用于一面的处理器 @Override public void doHandle() { System.out.println(&amp;#34;============= 白马程序员一面 ==========&amp;#34;); System.out.println(&amp;#34;1. 谈谈你对static关键字的理解？&amp;#34;); System.out.println(&amp;#34;2. 内部类可以调用外部的数据吗？如果是静态的呢？&amp;#34;); System.</description>
    </item>
    
    <item>
      <title>行为型-迭代器模式</title>
      <link>https://zhengbledor.github.io/posts/%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>行为型-迭代器模式 Link to heading 提供一种方法顺序访问一个聚合对象中的各种元素，而又不暴露该对象的内部表示。
正是因为有迭代器的存在，我们才能更加优雅的使用foreach语法。
public static void main(String[] args) { List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;#34;AAA&amp;#34;, &amp;#34;BBB&amp;#34;, &amp;#34;CCC&amp;#34;); for (String s : list) { //使用foreach语法糖进行迭代，依次获取每一个元素 System.out.println(s); //打印一下 } } 编译之后的代码如下：
public static void main(String[] args) { List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;#34;AAA&amp;#34;, &amp;#34;BBB&amp;#34;, &amp;#34;CCC&amp;#34;); Iterator var2 = list.iterator(); //实际上这里本质是通过List生成的迭代器来遍历我们每个元素的 while(var2.hasNext()) { //判断是否还有元素可以迭代，没有就false String s = (String)var2.next(); //通过next方法得到下一个元素，每调用一次，迭代器会向后移动一位 System.out.println(s); //打印一下 } } 可以看到，当我们使用迭代器对List进行遍历时，实际上就像一个指向列表头部的指针，我们通过不断向后移动指针来依次获取所指向的元素：
这里，我们依照JDK提供的迭代器接口（JDK已经为我们定义好了一个迭代器的具体相关操作），也来设计一个迭代器：
public class ArrayCollection&amp;lt;T&amp;gt; { //首先设计一个简单的数组集合，一会我们就迭代此集合内的元素 private final T[] array; //底层使用一个数组来存放数据 private ArrayCollection(T[] array){ //private掉，自己用 this.</description>
    </item>
    
    <item>
      <title>Kotlin编程实战-阅读记录</title>
      <link>https://zhengbledor.github.io/posts/kotlin%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/</link>
      <pubDate>Mon, 06 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/kotlin%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/</guid>
      <description>Kotlin编程实战 Link to heading 第2章 从Java角度了解Kotlin的基本知识 Link to heading 2.1 减少输入 Link to heading 分号是可选的
变量类型规范是可选的
类和函数是可选的
函数可以在类外面执行
下面的脚本包含一个不属于任何类的函数和一些不属于任何函数的独立代码。
kotlin/standalone.kts
fun nofluff(){ println(&amp;#34;nofluff called&amp;#34;) throw RuntimeException(&amp;#34;oops&amp;#34;) } println(&amp;#34;no in a function, calling nofluff()&amp;#34;) try{ nofluff() }catch(ex: Exception){ val stackTrace = ex.getStackTrace() println(stackTrace[0]) println(stackTrace[1]) } // 打印结果 no in a function, calling nofluff() nofluff called.. Standalone.nofluff(...) Standalone.&amp;lt;init&amp;gt;(...) Kotlin悄悄将函数nofluff()转换成一个名为Standalone的合成类的方法（通过文件名推断出的名称）
将独立代码转换为类的构造函数，输出了&amp;lt;init&amp;gt;
try-catch是可选的
2.2 合理的警告 Link to heading 2.3 选择val而不是var Link to heading 2.</description>
    </item>
    
    <item>
      <title>创建型-原型模式</title>
      <link>https://zhengbledor.github.io/posts/%E5%88%9B%E5%BB%BA%E5%9E%8B-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/%E5%88%9B%E5%BB%BA%E5%9E%8B-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>创建型-原型模式 Link to heading 原型模式主要解决的问题就是创建重复对象，而这部分对象内容本身比较复杂，生成过程可能从库或者RPC接口中获取数据的耗时较长，因此采用克隆的方式节省时间。
这种场景就像CV代码、java中的clone一样。
模拟场景 Link to heading 一个上机考试抽题服务，做到能够混排题目，混排答案。这个服务用于选择题、问答题的试卷创建。
数据准备
public class ChoiceQuestion{ private String name; private Map&amp;lt;String, String&amp;gt; option; private String key; public ChoiceQuestion(String name. Map&amp;lt;String, String&amp;gt; option, String key){ this.name = name; this. option = option; this. key = key; } } public class AnswerQuestion{ private String name; private String key; public AnswerQuestion(String name,String key){ this.name = name; this.key = key; } } 最初设计 Link to heading public class QuestionBankController{ public String createPaper(Stirng candidate, String number){ // do sth // 手工填写不同问题 } } 这样的代码非常容易理解，要什么题目就塞进去，只面向过程，不考虑扩展性。</description>
    </item>
    
    <item>
      <title>创建型-建造者模式</title>
      <link>https://zhengbledor.github.io/posts/%E5%88%9B%E5%BB%BA%E5%9E%8B-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/%E5%88%9B%E5%BB%BA%E5%9E%8B-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>创建型-建造者模式 Link to heading 建造者模式所完成的内容就是通过将多个简单对象通过一步步的组装构建出一个复杂对象的过程。
模拟场景 Link to heading 模拟装修公司对于设计出一些套餐装修服务的场景
吊顶、涂料、地板、地砖等
最初设计 Link to heading 物料接口
public interface Matter { String scene(); // 场景 String brand();	// 品牌 String model(); // 型号 BigDecimal price();	// 价格 String desc();	// 描述 } 使用
public class DecorationPackageController{ public List&amp;lt;Matter&amp;gt; getMaterList(BigDecimal area, int type){ List&amp;lt;Matter&amp;gt; list = new ArrayList&amp;lt;Matter&amp;gt;(); BigDecimal price = BigDecimal.Zero; if(1 == type){ // do something } else(2 == type){ // do something } else(3 == type){ // do somgting } return list; } } 改进方案 Link to heading 工程结构</description>
    </item>
    
    <item>
      <title>创建型-抽象工厂模式</title>
      <link>https://zhengbledor.github.io/posts/%E5%88%9B%E5%BB%BA%E5%9E%8B-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/%E5%88%9B%E5%BB%BA%E5%9E%8B-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>创建型-抽象工厂模式 Link to heading 抽象工厂模式也可以叫其他工厂模式，它可以在抽象工厂中创建出其他工厂，与工厂模式一样，都是用来解决接口选择的问题。
场景模拟 Link to heading 此前业务使用的数据库为单机Redis
但是随着业务的发展，此前的单机Redis已经无法适用于项目，所以需要升级成健壮的Redis集群服务。
很多服务都用到Redis，需要一起升级。 需要同时兼容集群EGM和IIR 两套集群的接口不一样，需要同时做兼容 不能影响目前正常运行的系统 最初设计 Link to heading 给接口添加Redis集群使用类型，以控制使用哪套集群服务。 但是不能停止已经使用的集群，所以还保留了此前单机的Redis接口。 工程结构
├─application │ ├─CacheService.java │ └─CacheServiceImpl.java └─redis ├─RedisUtils.java └─cluster ├─EGM.java └─IIR.java 服务定义
public class EGM { private Map&amp;lt;String, String&amp;gt; dataMap = new ConcurrentHashMap&amp;lt;&amp;gt;(); public String gain(String key) { return dataMap.get(key); } public void set(String key, String value) { dataMap.put(key, value); } public void delete(String key) { dataMap.remove(key); } } public class IIR { private Map&amp;lt;String, String&amp;gt; dataMap = new ConcurrentHashMap&amp;lt;&amp;gt;(); public String get(String key) { return dataMap.</description>
    </item>
    
    <item>
      <title>结构型-享元模式</title>
      <link>https://zhengbledor.github.io/posts/%E7%BB%93%E6%9E%84%E5%9E%8B-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/%E7%BB%93%E6%9E%84%E5%9E%8B-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</guid>
      <description>结构型-享元模式 Link to heading 它使用共享物件，用来尽可能减少内存使用量以及分享资讯给尽可能多的相似物件；它适合用于只是因重复而导致使用无法令人接受的大量内存的大量物件。
通常物件中的部分状态是可以分享。常见做法是把它们放在外部数据结构，当需要使用时再将它们传递给享元。
public static void main(String[] args) { String str1 = &amp;#34;abcdefg&amp;#34;; String str2 = &amp;#34;abcd&amp;#34;; } // 优化 public static void main(String[] args) { String tempo1 = &amp;#34;efg&amp;#34;; String str2 = &amp;#34;abcd&amp;#34;; System.out.println(&amp;#34;str1 = &amp;#34;+str2+tempo1); } 我们可以将那些重复出现的内容作为共享部分取出，这样当我们拥有大量对象时，我们把其中共同的部分抽取出来，由于提取的部分是多个对象共享只有一份，那么就可以减轻内存的压力。
比如现在我们有两个服务，但是他们都需要使用数据库工具类来操作，实际上这个工具类没必要创建多个，我们这时就可以使用享元模式，让数据库工具类作为享元类，通过享元工厂来提供一个共享的数据库工具类：
public class DBUtil { public void selectDB(){ System.out.println(&amp;#34;我是数据库操作...&amp;#34;); } } public class DBUtilFactory { private static final DBUtil UTIL = new DBUtil(); //享元对象被存放在工厂中 public static DBUtil getFlyweight(){ //获取享元对象 return UTIL; } } 最后当我们需要使用享元对象时，直接找享元工厂要就行了：</description>
    </item>
    
    <item>
      <title>结构型-代理模式</title>
      <link>https://zhengbledor.github.io/posts/%E7%BB%93%E6%9E%84%E5%9E%8B-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/%E7%BB%93%E6%9E%84%E5%9E%8B-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
      <description>结构型-代理模式 Link to heading 代理模式和装饰模式很像，初学者很容易搞混，所以这里我们得紧接着来讲解一下。首先请记住，当无法直接访问某个对象或访问某个对象存在困难时，我们就可以通过一个代理对象来间接访问。
比如现在有一个目标类，但是我们现在需要通过代理来使用它：
public abstract class Subject { public abstract void test(); } public class SubjectImpl extends Subject{ //此类无法直接使用，需要我们进行代理 @Override public void test() { System.out.println(&amp;#34;我是测试方法！&amp;#34;); } } 现在我们为其建立一个代理类：
public class Proxy extends Subject{ //为了保证和Subject操作方式一样，保证透明性，也得继承 Subject target; //被代理的对象（甚至可以多重代理） public Proxy(Subject subject){ this.target = subject; } @Override public void test() { //由代理去执行被代理对象的方法，并且我们还可以在前后添油加醋 System.out.println(&amp;#34;代理前绕方法&amp;#34;); target.test(); System.out.println(&amp;#34;代理后绕方法&amp;#34;); } } 对装饰器模式来说，装饰者和被装饰者都实现同一个接口/抽象类。对代理模式来说，代理类和被代理的类都实现同一个接口/抽象类，在结构上确实没有啥区别。
装饰器模式强调的是增强自身，在被装饰之后你能够在被增强的类上使用增强后的功能。
代理模式强调要让别人帮你去做事情，以及添加一些本身与你业务没有太多关系的事情。
装饰模式和代理模式的不同之处在于思想。
当然实现代理模式除了我们上面所说的这种方式之外，我们还可以使用JDK为我们提供的动态代理机制，我们不再需要手动编写继承关系创建代理类，它能够在运行时通过反射机制为我们自动生成代理类：
public interface Subject { //JDK提供的动态代理只支持接口 void test(); } public class SubjectImpl implements Subject{ @Override public void test() { System.</description>
    </item>
    
    <item>
      <title>结构型-外观模式</title>
      <link>https://zhengbledor.github.io/posts/%E7%BB%93%E6%9E%84%E5%9E%8B-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/%E7%BB%93%E6%9E%84%E5%9E%8B-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</guid>
      <description> 结构型-外观模式 Link to heading 外观模式充分体现了迪米特法则。可能我们的整个项目有很多个子系统，但是我们可以在这些子系统的上面加一个门面（Facade）当我们外部需要与各个子系统交互时，无需再去直接使用各个子系统，而是与门面进行交互，再由门面与后面的各个子系统操作，这样，我们以后需要办什么事情，就统一找门面就行了。这样的好处是，首先肯定方便了代码的编写，统一找门面就行，不需要去详细了解子系统，并且，当子系统需要修改时，也只需要修改门面中的逻辑，不需要大面积的变动，遵循迪米特法则尽可能少的交互。
比如现在我们设计了三个子系统，分别是排队、结婚、领证，正常情况下我们是需要分别去找这三个部门去完成的，但是现在我们通过门面统一来完成：
public class SubSystemA { public void test1(){ System.out.println(&amp;#34;排队&amp;#34;); } } public class SubSystemB { public void test2(){ System.out.println(&amp;#34;结婚&amp;#34;); } } public class SubSystemC { public void test3(){ System.out.println(&amp;#34;领证&amp;#34;); } } 现在三个系统太复杂了，我们添加一个门面：
public class Facade { SubSystemA a = new SubSystemA(); SubSystemB b = new SubSystemB(); SubSystemC c = new SubSystemC(); public void marry(){ //红白喜事一条龙服务 a.test1(); b.test2(); c.test3(); } } </description>
    </item>
    
    <item>
      <title>结构型-桥接模式</title>
      <link>https://zhengbledor.github.io/posts/%E7%BB%93%E6%9E%84%E5%9E%8B-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/%E7%BB%93%E6%9E%84%E5%9E%8B-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description>结构型-桥接模式 Link to heading 桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化。
【GOF95】在提出桥梁模式的时候指出，桥梁模式的用意是&amp;quot;将抽象化(Abstraction)与实现化(Implementation)脱耦，使得二者可以独立地变化&amp;quot;。这句话有三个关键词，也就是抽象化、实现化和脱耦。
下列各语言的代码都用于写出两个不同的圆的坐标和半径。
/** &amp;#34;Implementor&amp;#34; */ interface DrawingAPI{ public void drawCircle(double x, double y, double radius); } /** &amp;#34;ConcreteImplementor&amp;#34; 1/2 */ class DrawingAPI1 implements DrawingAPI{ public void drawCircle(double x, double y, double radius){ System.out.printf(&amp;#34;API1.circle at %f:%f radius %f\n&amp;#34;, x, y, radius); } } /** &amp;#34;ConcreteImplementor&amp;#34; 2/2 */ class DrawingAPI2 implements DrawingAPI{ public void drawCircle(double x, double y, double radius){ System.out.printf(&amp;#34;API2.circle at %f:%f radius %f\n&amp;#34;, x, y, radius); } }/** &amp;#34;Abstraction&amp;#34; */ interface Shape{ public void draw(); // low-level public void resizeByPercentage(double pct); // high-level } /** &amp;#34;Refined Abstraction&amp;#34; */ class CircleShape implements Shape{ private double x, y, radius; private DrawingAPI drawingAPI; public CircleShape(double x, double y, double radius, DrawingAPI drawingAPI){ this.</description>
    </item>
    
    <item>
      <title>结构型-组合模式</title>
      <link>https://zhengbledor.github.io/posts/%E7%BB%93%E6%9E%84%E5%9E%8B-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/%E7%BB%93%E6%9E%84%E5%9E%8B-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</guid>
      <description>结构型-组合模式 Link to heading 组合模式，将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。
有时候又叫做部分-整体模式，它使我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂元素,从而使得客户程序与复杂元素的内部结构解耦。
模拟场景 Link to heading 我们有一个类 Employee，该类被当作组合模型类。
public class Employee { private String name; private String dept; private int salary; private List&amp;lt;Employee&amp;gt; subordinates; //构造函数 public Employee(String name,String dept, int sal) { this.name = name; this.dept = dept; this.salary = sal; subordinates = new ArrayList&amp;lt;Employee&amp;gt;(); } public void add(Employee e) { subordinates.add(e); } public void remove(Employee e) { subordinates.remove(e); } public List&amp;lt;Employee&amp;gt; getSubordinates(){ return subordinates; } public String toString(){ return (&amp;#34;Employee :[ Name : &amp;#34;+ name +&amp;#34;, dept : &amp;#34;+ dept + &amp;#34;, salary :&amp;#34; + salary+&amp;#34; ]&amp;#34;); } } // 使用 public class CompositePatternDemo { public static void main(String[] args) { Employee CEO = new Employee(&amp;#34;John&amp;#34;,&amp;#34;CEO&amp;#34;, 30000); Employee headSales = new Employee(&amp;#34;Robert&amp;#34;,&amp;#34;Head Sales&amp;#34;, 20000); Employee headMarketing = new Employee(&amp;#34;Michel&amp;#34;,&amp;#34;Head Marketing&amp;#34;, 20000); Employee clerk1 = new Employee(&amp;#34;Laura&amp;#34;,&amp;#34;Marketing&amp;#34;, 10000); Employee clerk2 = new Employee(&amp;#34;Bob&amp;#34;,&amp;#34;Marketing&amp;#34;, 10000); Employee salesExecutive1 = new Employee(&amp;#34;Richard&amp;#34;,&amp;#34;Sales&amp;#34;, 10000); Employee salesExecutive2 = new Employee(&amp;#34;Rob&amp;#34;,&amp;#34;Sales&amp;#34;, 10000); CEO.</description>
    </item>
    
    <item>
      <title>结构型-装饰模式</title>
      <link>https://zhengbledor.github.io/posts/%E7%BB%93%E6%9E%84%E5%9E%8B-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/%E7%BB%93%E6%9E%84%E5%9E%8B-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</guid>
      <description>结构型-装饰模式 Link to heading 装饰模式就像其名字一样，为了对现有的类进行装饰。比如一张相片就一张纸，如果直接贴在墙上，总感觉少了点什么，但是我们给其添加一个好看的相框，就会变得非常对味。装饰模式的核心就在于不改变一个对象本身功能的基础上，给对象添加额外的行为，并且它是通过组合的形式完成的，而不是传统的继承关系。
比如我们现在有一个普通的功能类：
public abstract class Base { //顶层抽象类，定义了一个test方法执行业务 public abstract void test(); } public class BaseImpl extends Base{ @Override public void test() { System.out.println(&amp;#34;我是业务方法&amp;#34;); //具体的业务方法 } } 不过现在的实现类太单调了，我们来添加一点装饰上去：
public class Decorator extends Base{ //装饰者需要将装饰目标组合到类中 protected Base base; public Decorator(Base base) { this.base = base; } @Override public void test() { base.test(); //这里暂时还是使用目标的原本方法实现 } } public class DecoratorImpl extends Decorator{ //装饰实现 public DecoratorImpl(Base base) { super(base); } @Override public void test() { //对原本的方法进行装饰，我们可以在前后都去添加额外操作 System.</description>
    </item>
    
    <item>
      <title>结构型-适配器模式</title>
      <link>https://zhengbledor.github.io/posts/%E7%BB%93%E6%9E%84%E5%9E%8B-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/%E7%BB%93%E6%9E%84%E5%9E%8B-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>结构型-适配器模式 Link to heading 将一个类的接口转换成客户希望的另一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的哪些类可以一起工作。
其中主要有三个角色
目标角色：该角色定义把其他类转换为何种接口，也就是我们的期望接口。
源角色：你想把谁转换成目标角色，这个“谁”就是源角色，它是已经存在的、运行良好的类或对象。
适配器角色：通过继承或是类关联的方式把源角色转换为目标角色。
场景模拟 Link to heading 中国的充电器无法在英国使用，需要使用适配器。
类适配器 Link to heading 适配器通过类来实现，以类来继承和实现接口的方式，来获取被适配类的信息并转换输出重写到适配接口。
public class ChineseStandard{ public String getChineseStandard(){ return &amp;#34;中式插座&amp;#34;; } } public class interfaceBritishStandard{ String getBritishStandard(); } public StandardAdapter extends ChineseStandard implements interfaceBritishStandard{ @Override public String getBritishStandard(){ return this.getChineseStandard(); } } 对象适配器 Link to heading 通过实例对象（构造器传递）来实现适配器，而不是再用继承，其余基本同类适配器。
public StandardAdapter implements interfaceBritishStandard{ private ChineseStandard chineseStandard = new ChineseStandard(); @Override public String getBritishStandard(){ return chineseStandard.</description>
    </item>
    
    <item>
      <title>创建型-单例模式</title>
      <link>https://zhengbledor.github.io/posts/%E5%88%9B%E5%BB%BA%E5%9E%8B-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/%E5%88%9B%E5%BB%BA%E5%9E%8B-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>创建型-单例模式 Link to heading 7种单例模式的创建 Link to heading 单例模式的实现方式比较多，主要在实现上是否支持懒汉模式、是否线程安全中运用各种技巧。 当然也有一些场景不需要考虑懒加载的情况，会直接使用static静态累或属性和方法的方式进行处理，供外部调用。
0. 静态类使用 Link to heading public class Singleton_00{ public static Map&amp;lt;String, String&amp;gt; cache = new ConcurrentHashMap&amp;lt;String, String&amp;gt;(); } 这样的静态类的方式可以在第一次运行的时候直接初始化Map类，不需要到延迟加载在使用。 1. 懒汉模式（线程不安全） Link to heading public class Singleton_01 { private static Singleton_01 instance; private Singleton_01() { } public static Singleton_01 getInstance(){ if (null != instance) return instance; instance = new Singleton_01(); return instance; } } 有一个特点就是外部不允许直接创建，只能通过Singleton_01.getInstance()来初始化创建该单例。 这种方式的范例确实满足了懒加载，但是如果多个访问者同时进入getInstance()中可能会出现同时存在多个实例的问题。 2. 懒汉模式（线程安全） Link to heading public class Singleton_02 { private static Singleton_02 instance; private Singleton_02() { } public static synchronized Singleton_02 getInstance(){ if (null !</description>
    </item>
    
    <item>
      <title>创建型-工厂模式</title>
      <link>https://zhengbledor.github.io/posts/%E5%88%9B%E5%BB%BA%E5%9E%8B-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/%E5%88%9B%E5%BB%BA%E5%9E%8B-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>创建型-工厂模式 Link to heading 工厂模式又称为简单工厂模式，属于创建型设计模式的一种。
这种设计模式提供了按需创建对象的最佳方式。不会对外暴露创建细节，并且会通过一个统一的接口创建所需的对象。
它主要的意图是定义一个创建对象的接口，让其子类自己决定将哪一个工厂类实例化，工厂模式使创建过程延迟到子类中进行。
场景模拟 Link to heading 模拟发放多种奖品，在营销场景中，经常会约定在用户完成打卡、分享、留言、邀请注册等一系列行为操作后进行返利积分的操作。用户再通过返利积分兑换奖品，让整个系统构成一个生态闭环。
现假设有以下三种类型的商品接口。
// 优惠券 CouponResult sendCoupon(String uId, String couponNumber, String uuid); // 实物商品 Boolean deliverGoods(DeliverReq req); // 第三方兑换卡 void grantToken(String bindMobileNumber, String cardId); 三个接口返回值类型不同，入参不同，并且未来可能会扩展的兑换场景。
最初设计 Link to heading 工程结构
├─AwardReq.java ├─AwardRes.java └─PrizeController.java 实现
public class PrizeController{ public AwardRes awardToUser(AwardReq req){ if(req.type == &amp;#34;优惠券&amp;#34;){ // do something CouponResult result = sendCoupon(req.uId,req.conponNumber,req.uuid); return AwardRes(result); }else if(req.type == &amp;#34;实物&amp;#34;){ DelilverReq deliverReq = new DeliverReq(); // do something Boolean result = deliverGoods(deliverReq); return AwardRes(result); }else if(req.</description>
    </item>
    
    <item>
      <title>六大设计原则</title>
      <link>https://zhengbledor.github.io/posts/designprinciples/</link>
      <pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhengbledor.github.io/posts/designprinciples/</guid>
      <description>Design Principles Link to heading 一、单一职责原则 Link to heading 一个类应该只有一个发生变化的原因。
模拟场景 Link to heading 一个视频网站有对用户分类的场景
访客用户只能观看480P视频，且有广告 普通会员只能观看720P视频，且有广告 VIP用户可以看1080P视频，且无广告
违背原则 Link to heading public class VideoUserSerice{ public void serveGrade(String usrType){ if(usrType == &amp;#34;VIP&amp;#34;){ // 视频1080P，无广告 }else if(usrType == &amp;#34;普通会员&amp;#34;){ // 视频720P，有广告 }else if(usrType == &amp;#34;访客用户&amp;#34;){ // 视频480P，有广告 } } } 改进方案 Link to heading public interface IVideoUserService{` // 清晰度 1080P、720P、480P void definition(); // 广告播放方式，有广告、无广告 void advertisement(); } 二、开闭原则 Link to heading 对象、类、模块和函数对扩展应该是开放的，但是对于修改是封闭的。</description>
    </item>
    
  </channel>
</rss>
